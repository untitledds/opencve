name: Tests and Build
on: [push, pull_request, workflow_dispatch]

jobs:
  pre-commit:
    runs-on: ubuntu-22.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: x64

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  tests-web:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        architecture: [x64, arm64]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: opencve
          POSTGRES_PASSWORD: opencve
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      # 1. Настройка QEMU для ARM
      - name: Set up QEMU for ARM emulation
        if: matrix.architecture == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # 2. Регистрация обработчиков бинарных форматов
      - name: Register binfmt handlers
        if: matrix.architecture == 'arm64'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # 3. Установка зависимостей для ARM
      - name: Install ARM dependencies
        if: matrix.architecture == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support

      # 4. Установка ARM-библиотек
      - name: Install ARM libraries
        if: matrix.architecture == 'arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libc6:arm64

      # 5. Git checkout
      - name: Git checkout
        uses: actions/checkout@v4

      # 6. Настройка Python
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      # 7. Кэширование Python зависимостей
      - name: Cache Python dependencies
        id: cache-web-deps
        uses: actions/cache@v3
        with:
          path: web/venv
          key: web-deps-${{ hashFiles('web/requirements.txt') }}-${{ matrix.architecture }}

      # 8. Установка зависимостей
      - name: Install requirements
        run: |
          cd web
          cp opencve/conf/settings.py.example opencve/conf/settings.py
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements.txt

      # 9. Выполнение тестов
      - name: Execute tests
        env:
          DJANGO_SETTINGS_MODULE: opencve.conf.settings
          OPENCVE_DATABASE_URL: postgresql://opencve:opencve@localhost:5432/opencve
        run: |
          cd web
          python manage.py check
          pytest tests/ -v

  tests-scheduler:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        architecture: [x64, arm64]
    services:
      postgres_web:
        image: postgres
        env:
          POSTGRES_USER: opencve
          POSTGRES_PASSWORD: opencve
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis_web:
        image: redis/redis-stack
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      # 1. Настройка QEMU для ARM
      - name: Set up QEMU for ARM emulation
        if: matrix.architecture == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # 2. Регистрация обработчиков бинарных форматов
      - name: Register binfmt handlers
        if: matrix.architecture == 'arm64'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # 3. Установка зависимостей для ARM
      - name: Install ARM dependencies
        if: matrix.architecture == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support

      # 4. Установка ARM-библиотек
      - name: Install ARM libraries
        if: matrix.architecture == 'arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libc6:arm64

      # 5. Git checkout
      - name: Git checkout
        uses: actions/checkout@v4

      # 6. Настройка Python
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      # 7. Кэширование Python зависимостей
      - name: Cache Python dependencies
        id: cache-scheduler-deps
        uses: actions/cache@v3
        with:
          path: scheduler/venv
          key: scheduler-deps-${{ hashFiles('scheduler/requirements.txt') }}-${{ matrix.architecture }}

      # 8. Инициализация базы данных
      - name: Init web database
        run: |
          cd web
          cp opencve/conf/settings.py.example opencve/conf/settings.py
          python -m venv venv_web
          source venv_web/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py migrate
          deactivate
        env:
          DJANGO_SETTINGS_MODULE: opencve.conf.settings
          OPENCVE_DATABASE_URL: postgresql://opencve:opencve@localhost:5432/opencve

      # 9. Установка зависимостей планировщика
      - name: Install scheduler requirements
        run: |
          cd scheduler
          python -m venv venv_scheduler
          source venv_scheduler/bin/activate
          pip install -r requirements.txt
          pip install pytest==8.3.2

      # 10. Выполнение тестов
      - name: Execute tests
        run: |
          cd scheduler
          source venv_scheduler/bin/activate
          pytest tests/ -v

  build-and-push:
    runs-on: ubuntu-22.04
    needs: [pre-commit, tests-web, tests-scheduler]
    strategy:
      matrix:
        architecture: [x64, arm64]
    steps:
      # 1. Настройка QEMU для ARM
      - name: Set up QEMU for ARM emulation
        if: matrix.architecture == 'arm64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      # 2. Регистрация обработчиков бинарных форматов
      - name: Register binfmt handlers
        if: matrix.architecture == 'arm64'
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      # 3. Установка зависимостей для ARM
      - name: Install ARM dependencies
        if: matrix.architecture == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support

      # 4. Установка ARM-библиотек
      - name: Install ARM libraries
        if: matrix.architecture == 'arm64'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y libc6:arm64

      # 5. Git checkout
      - name: Git checkout
        uses: actions/checkout@v4

      # 6. Логин в GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Определение версии
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "Using tag: ${{ github.ref_name }}"
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "Using branch name: ${{ github.ref_name }}"
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      # 8. Проверка изменений в директории web
      - name: Check for changes in web directory
        id: check-web-changes
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- web/; then
            echo "No changes in web directory"
            echo "web_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in web directory"
            echo "web_changed=true" >> $GITHUB_OUTPUT
          fi

      # 9. Проверка изменений в директории scheduler
      - name: Check for changes in scheduler directory
        id: check-scheduler-changes
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- scheduler/; then
            echo "No changes in scheduler directory"
            echo "scheduler_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in scheduler directory"
            echo "scheduler_changed=true" >> $GITHUB_OUTPUT
          fi

      # 10. Сборка и публикация образа webserver
      - name: Build and push webserver image
        if: steps.check-web-changes.outputs.web_changed == 'true'
        run: |
          cd web
          docker buildx create --use
          docker buildx build \
            --platform linux/${{ matrix.architecture }} \
            --build-arg OPENCVE_VERSION=${{ steps.version.outputs.version }} \
            -t ghcr.io/${{ github.repository }}/opencve-webserver:${{ steps.version.outputs.version }}-${{ matrix.architecture }} \
            --push .

      # 11. Сборка и публикация образа scheduler
      - name: Build and push scheduler image
        if: steps.check-scheduler-changes.outputs.scheduler_changed == 'true'
        run: |
          cd scheduler
          docker buildx create --use
          docker buildx build \
            --platform linux/${{ matrix.architecture }} \
            -t ghcr.io/${{ github.repository }}/opencve-scheduler:${{ steps.version.outputs.version }}-${{ matrix.architecture }} \
            --push .
