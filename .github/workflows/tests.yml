name: Tests
on: [push, pull_request, workflow_dispatch]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          architecture: x64
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  tests-web:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: opencve
          POSTGRES_PASSWORD: opencve
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Cache Python dependencies
        id: cache-web-deps
        uses: actions/cache@v3
        with:
          path: web/venv
          key: web-deps-${{ hashFiles('web/requirements.txt') }}
      - name: Install requirements
        run: |
          cd web
          cp opencve/conf/settings.py.example opencve/conf/settings.py
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r tests/requirements.txt
      - name: Display packages version
        run: |
          python -c "import sys; print(sys.version)"
          pip freeze
      - name: Execute tests
        env:
          DJANGO_SETTINGS_MODULE: opencve.conf.settings
          OPENCVE_DATABASE_URL: postgresql://opencve:opencve@localhost:5432/opencve
        run: |
          cd web
          python manage.py check
          pytest tests/ -v

  tests-scheduler:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    services:
      postgres_web:
        image: postgres
        env:
          POSTGRES_USER: opencve
          POSTGRES_PASSWORD: opencve
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis_web:
        image: redis/redis-stack
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Cache Python dependencies
        id: cache-scheduler-deps
        uses: actions/cache@v3
        with:
          path: scheduler/venv
          key: scheduler-deps-${{ hashFiles('scheduler/requirements.txt') }}
      - name: Init web database
        run: |
          cd web
          cp opencve/conf/settings.py.example opencve/conf/settings.py
          python -m venv venv_web
          source venv_web/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py migrate
          deactivate
        env:
          DJANGO_SETTINGS_MODULE: opencve.conf.settings
          OPENCVE_DATABASE_URL: postgresql://opencve:opencve@localhost:5432/opencve
      - name: Install scheduler requirements
        run: |
          cd scheduler
          python -m venv venv_scheduler
          source venv_scheduler/bin/activate
          pip install -r requirements.txt
          pip install pytest==8.3.2
      - name: Execute tests
        run: |
          cd scheduler
          source venv_scheduler/bin/activate
          pytest tests/ -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: [pre-commit, tests-web, tests-scheduler]  # Запускать только после успешного прохождения тестов
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Determine version or branch
        id: version
        run: |
          if [ "${{ github.ref_type }}" == "tag" ]; then
            echo "Using tag: ${{ github.ref_name }}"
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "Using branch name: ${{ github.ref_name }}"
            # Убираем префикс refs/heads/ из имени ветки
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///g')
            echo "version=$BRANCH_NAME" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes in web directory
        id: check-web-changes
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- web/; then
            echo "No changes in web directory"
            echo "web_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in web directory"
            echo "web_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes in scheduler directory
        id: check-scheduler-changes
        run: |
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- scheduler/; then
            echo "No changes in scheduler directory"
            echo "scheduler_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in scheduler directory"
            echo "scheduler_changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Build and push webserver image
        if: steps.check-web-changes.outputs.web_changed == 'true'
        run: |
          cd web  # Переход в папку web
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg OPENCVE_VERSION=${{ steps.version.outputs.version }} \
            -t ghcr.io/${{ github.repository }}/opencve-webserver:${{ steps.version.outputs.version }} \
            -t ghcr.io/${{ github.repository }}/opencve-webserver:${{ steps.version.outputs.version }}-arm64 \
            -t ghcr.io/${{ github.repository }}/opencve-webserver:latest \
            --push .

      - name: Build and push scheduler image
        if: steps.check-scheduler-changes.outputs.scheduler_changed == 'true'
        run: |
          cd scheduler  # Переход в папку scheduler
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/opencve-scheduler:${{ steps.version.outputs.version }} \
            -t ghcr.io/${{ github.repository }}/opencve-scheduler:${{ steps.version.outputs.version }}-arm64 \
            -t ghcr.io/${{ github.repository }}/opencve-scheduler:latest \
            --push .
